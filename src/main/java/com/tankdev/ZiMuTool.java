package com.tankdev;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

/**
 * @author tankdev@163.com
 *
 * @since 2020-04-04 21:42
 */
public class ZiMuTool {

	private static final String YOUDAO_URL = "https://openapi.youdao.com/api";

	private static final String APP_KEY = "";

	private static final String APP_SECRET = "";

	public static void main(String[] args) throws IOException {
		String headerInfo = "[Script Info]\n" + "; Script generated by FFmpeg/Lavc58.55.100 tankdev@163.com\n"
				+ "ScriptType: v4.00+\n" + "WrapStyle: 0\n" + "ScaledBorderAndShadow: yes\n" + "YCbCr Matrix: TV.601\n"
				+ "PlayResX: 1280\n" + "PlayResY: 720\n" + "\n" + "[V4+ Styles]\n"
				+ "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n"
				+ "Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0\n"
				+ "Style: EnglishStyle,Arial,40,&H00FFFFFF,&H00FFFFFF,&H00000000,&H00020203,-1,0,0,0,100,100,0,0,1,1,1,2,10,10,6,1\n"
				+ "Style: ChineseStyle,Source Han Sans CN,50,&H00FFFFFF,&H00FFFFFF,&H00000000,&H00020203,-1,0,0,0,100,100,0,0,1,1,1.4,2,10,10,6,1\n"
				+ "\n" + "[Events]\n"
				+ "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n";
		String line;
		String splitFlag = ",,0,0,0,,";
		String dir = "E:\\video\\ironman\\剪辑\\java\\2\\";
		String f = "2";
		BufferedReader bufferedReader = new BufferedReader(new FileReader(dir + f + ".ass"));
		BufferedWriter writer = new BufferedWriter(new FileWriter(dir + "5_zy.ass"));
		writer.write(headerInfo);
		while ((line = bufferedReader.readLine()) != null) {
			if (line.startsWith("Dialogue")) {

				String[] split = line.split(splitFlag);
				String time = split[0];
				String text = split[1];
				String englishTime = time.replaceAll("Default", "EnglishStyle");
				String chineseTime = time.replaceAll("Default", "ChineseStyle");
				String englishText = text.replaceAll("\\\\N", " ").replaceAll("\\{\\\\i1\\}", "")
						.replaceAll("\\{\\\\i0}", "");
				writer.write(englishTime + splitFlag + englishText);
				writer.newLine();
				System.out.println(englishTime + splitFlag + englishText);
				Map<String, String> params = new HashMap<String, String>();
				String q = englishText;
				String salt = String.valueOf(System.currentTimeMillis());
				params.put("from", "en");
				params.put("to", "zh-CHS");
				params.put("signType", "v3");
				String curtime = String.valueOf(System.currentTimeMillis() / 1000);
				params.put("curtime", curtime);
				String signStr = APP_KEY + truncate(q) + salt + curtime + APP_SECRET;
				String sign = getDigest(signStr);
				params.put("appKey", APP_KEY);
				params.put("q", q);
				params.put("salt", salt);
				params.put("sign", sign);
				/** 处理结果 */
				String chineseText = requestForHttp(YOUDAO_URL, params);
				writer.write(chineseTime + splitFlag + chineseText);
				System.out.println(chineseTime + splitFlag + chineseText);
				writer.newLine();

			}
		}
		writer.flush();
		writer.close();
		System.out.println("ffmpeg -i " + f + ".mp4  -vf \"ass=" + "java_export.ass\"   " + f + "-merge.mp4");
	}

	public static String requestForHttp(String url, Map<String, String> params) throws IOException {
		String resultText = "";
		/** 创建HttpClient */
		CloseableHttpClient httpClient = HttpClients.createDefault();

		/** httpPost */
		HttpPost httpPost = new HttpPost(url);
		List<NameValuePair> paramsList = new ArrayList<NameValuePair>();
		Iterator<Map.Entry<String, String>> it = params.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<String, String> en = it.next();
			String key = en.getKey();
			String value = en.getValue();
			paramsList.add(new BasicNameValuePair(key, value));
		}
		httpPost.setEntity(new UrlEncodedFormEntity(paramsList, "UTF-8"));
		CloseableHttpResponse httpResponse = httpClient.execute(httpPost);
		try {
			Header[] contentType = httpResponse.getHeaders("Content-Type");
			if ("audio/mp3".equals(contentType[0].getValue())) {
				//如果响应是wav
				HttpEntity httpEntity = httpResponse.getEntity();
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				httpResponse.getEntity().writeTo(baos);
				byte[] result = baos.toByteArray();
				EntityUtils.consume(httpEntity);
				if (result != null) {//合成成功
					String file = "合成的音频存储路径" + System.currentTimeMillis() + ".mp3";
					byte2File(result, file);
				}
			} else {
				/** 响应不是音频流，直接显示结果 */
				HttpEntity httpEntity = httpResponse.getEntity();
				String json = EntityUtils.toString(httpEntity, "UTF-8");
				EntityUtils.consume(httpEntity);
//				System.out.println(json);
				JSONArray translation = JSON.parseObject(json).getJSONArray("translation");
				for (int i = 0; i < translation.size(); i++) {
					String string = translation.getString(i);
					resultText += string;
				}
				//				result =
			}
		} finally {
			try {
				if (httpResponse != null) {
					httpResponse.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return resultText;
	}

	/**
	 * 生成加密字段
	 */
	public static String getDigest(String string) {
		if (string == null) {
			return null;
		}
		char hexDigits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
		byte[] btInput = string.getBytes(StandardCharsets.UTF_8);
		try {
			MessageDigest mdInst = MessageDigest.getInstance("SHA-256");
			mdInst.update(btInput);
			byte[] md = mdInst.digest();
			int j = md.length;
			char str[] = new char[j * 2];
			int k = 0;
			for (byte byte0 : md) {
				str[k++] = hexDigits[byte0 >>> 4 & 0xf];
				str[k++] = hexDigits[byte0 & 0xf];
			}
			return new String(str);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 *
	 * @param result 音频字节流
	 * @param file 存储路径
	 */
	private static void byte2File(byte[] result, String file) {
		File audioFile = new File(file);
		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(audioFile);
			fos.write(result);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static String truncate(String q) {
		if (q == null) {
			return null;
		}
		int len = q.length();
		String result;
		return len <= 20 ? q : (q.substring(0, 10) + len + q.substring(len - 10, len));
	}

}
